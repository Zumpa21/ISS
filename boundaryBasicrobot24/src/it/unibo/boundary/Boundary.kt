/* Generated by AN DISI Unibo */ 
package it.unibo.boundary

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Boundary ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val OWNER = "$name";
				var STEPSDONE = 0; 
				var DIR = "down";
				var xdone = 0;
				var ydone = 0;	 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outred("$name starts")
						request("engage", "engage($OWNER,350)" ,"basicrobot" )  
						subscribeToLocalActor("boundary") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleEngageDone",cond=whenReply("engagedone"))
					transition(edgeName="t01",targetState="handleEngageRefused",cond=whenReply("engagerefused"))
				}	 
				state("handleEngageDone") { //this:State
					action { //it:State
						CommUtils.outgreen("$name engage done")
						delay(100) 
						request("step", "step(350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="handleStepDone",cond=whenReply("stepdone"))
				}	 
				state("handleStepDone") { //this:State
					action { //it:State
						 STEPSDONE +=1 
									if(DIR=="down") xdone += 1
									else if(DIR=="up") xdone -= 1
									if(DIR=="right") ydone += 1
									else if(DIR=="left") ydone -= 1
						discardMessages = false
						delay(100) 
						request("step", "step(350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="handlesonardata",cond=whenEvent("sonardata"))
					transition(edgeName="t04",targetState="handleStepDone",cond=whenReply("stepdone"))
					transition(edgeName="t05",targetState="handleStepFailed",cond=whenReply("stepfailed"))
				}	 
				state("handlesonardata") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("sonar(DISTANCE)"), Term.createTerm("sonar(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								delay(500) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="handleStepDone", cond=doswitch() )
				}	 
				state("handleStepFailed") { //this:State
					action { //it:State
							if(DIR=="down") DIR="right";	
									else if(DIR=="right") DIR="up";
									else if(DIR=="up") DIR="left";
									else if(DIR=="left") DIR="down";	 
						forward("setdirection", "dir($DIR)" ,"basicrobot" ) 
						if(  xdone == 0 && ydone == 0  
						 ){CommUtils.outblack("$name end ..")
						CommUtils.outblue("perimeter = $STEPSDONE")
						forward("end", "end(end)" ,"basicrobot" ) 
						}
						delay(500) 
						request("step", "step(350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="handleStepDone",cond=whenReply("stepdone"))
					transition(edgeName="t07",targetState="handleStepFailed",cond=whenReply("stepfailed"))
				}	 
				state("handleEngageRefused") { //this:State
					action { //it:State
						CommUtils.outred("$name engage refused")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
